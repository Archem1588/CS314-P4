Myong Seo (David) Park   a6q8
Dakang (Simon) Zhao      y5p8
Sarah Chang              u1d9

sarah.c.s.chang@gmail.com

OVERVIEW
The player will control a single 3D sphere. There will be many spheres of different sizes in the game. The player's sphere can absorb/consume any other sphere on the map that are smaller than itself. Player's sphere increases in size as it absorbs other spheres, but decreases in speed the larger it grows. There are three types of other spheres in the game: Stationary, Mobile, Spiked. Stationary spheres do not move. Mobile and Spiked spheres move around the map randomly. The player's sphere can absorb smaller Stationary and Mobile spheres, but if it collides with a Spiked sphere, then it dies and game over. The objective of the game is to have the player's sphere reach a certain size by a time limit without colliding into any Spiked spheres.

CHALLENGES
Implement an algorithm where other spheres move around randomly.
Implement a collision algorithm between spheres; detecting collision for absorbing another sphere or for dying due to collision with Spiked spheres.
Implement a particle system for explosion when collided with a Spiked sphere.


REQUIRED FRAMEWORK

3D Objects: Player's, Stationary, Mobile, Spiked spheres.

3D Camera:  Camera follows player's sphere which moves in all 3D directions. While following, can control camera to move forward and backward (closer and further away from sphere), as well as left/right/up/down (pitch & yaw) slightly.

Interactivity: Player's sphere will automatically move forward at a constant rate. Player can control the direction of where the sphere goes using up/down/left/right arrow keys and mouse drag.

Lighting and Shading: There will be a global light coming from a sun illuminating all objects.

Picking: When the player clicks on any sphere in the map with the mouse, the sphere's size will be displayed. 

Texturing: The Mobile spheres will have textures applied to them.

On-screen Control Panel: The right-top corner of the screen will have displays specifying the
  - Framerate Counter
  - Time Remaining
  - Size (current size of the player's sphere)
  - Goal (goal size of the player's sphere)

Gameplay: The goal of the game is to try to reach the goal size before the time runs out. Player loses if goal is not reached in time or if player runs into a spiked ball.


FEATURE OPTIONS

Advanced Rendering Effects: Some of the Mobile spheres that have textures will also have bump mapping. The Stationary spheres will have reflection/refraction using environment mapping from a skybox that will be the outer boundary of the game's map.

Shaders: The Spiked spheres will have phong shading on them.

Particle System: When the player's sphere collides with a Spiked spheres, the player's sphere will explode into bits using the particle system. The player's sphere will also explode when time runs out and game over.

Collision Detection: Collision needs to be detected when the player's sphere hits a ball it wants to absorb, as well as when the player's sphere hits a Spiked sphere and dies.

Animation: The Mobile and Spiked spheres will be moving around the map randomly.
